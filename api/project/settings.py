"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

from .environments import EnvironmentFileToDict, EnvironmentOsToDict

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Инициализируем переменные окружения.
ENV_DICT = {}

# Загружаем переменные из файла.
ENV_FILE_FROM_FILE = EnvironmentFileToDict()
ENV_FILE = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), '.env')

if os.path.exists(ENV_FILE):
    ENV_FILE_FROM_FILE.load(ENV_FILE)
    ENV_DICT.update(ENV_FILE_FROM_FILE)

# Загружаем переменные из ОС.
ENV_DICT_FROM_OS = EnvironmentOsToDict()
ENV_DICT_FROM_OS.load()

ENV_DICT.update(ENV_DICT_FROM_OS)


ADMINS = ()


# Теперь сами настройки проекта.
ENVIRONMENT = ENV_DICT.get('ENVIRONMENT', 'production')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ENV_DICT.get('DJANGO_SECRET_KEY', '')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ENV_DICT.get('DJANGO_DEBUG', True)

ALLOWED_HOSTS = ['*']


MAX_UPLOAD_FILE_SIZE = ENV_DICT.get('DJANGO_MAX_UPLOAD_FILE_SIZE', 1 * 1024 * 1024)
DATA_UPLOAD_MAX_MEMORY_SIZE = ENV_DICT.get(
    'DJANGO_DATA_UPLOAD_MAX_MEMORY_SIZE', MAX_UPLOAD_FILE_SIZE + (1 * 1024 * 1024)
)
FILE_UPLOAD_MAX_MEMORY_SIZE = ENV_DICT.get('DJANGO_FILE_UPLOAD_MAX_MEMORY_SIZE', MAX_UPLOAD_FILE_SIZE)


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'drf_auto',

    'apps.generator',
    'apps.utils',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    }
]

WSGI_APPLICATION = 'project.wsgi.application'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = ENV_DICT.get('DJANGO_STATIC_URL', None)  # '/static/'
STATIC_ROOT = ENV_DICT.get('DJANGO_STATIC_ROOT', os.path.join(BASE_DIR, 'static'))
MEDIA_URL = ENV_DICT.get('DJANGO_MEDIA_URL', None)  # /media/
MEDIA_ROOT = ENV_DICT.get('DJANGO_MEDIA_ROOT', os.path.join(BASE_DIR, 'media'))

# STORAGE SETTINGS
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'


STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)


REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'UPLOADED_FILES_USE_URL': MEDIA_URL if MEDIA_URL else '/media/',
    'PAGE_SIZE': 10,
    'COMPACT_JSON': True,
    'DATE_FORMAT': '%d.%m.%Y',
    'DATETIME_FORMAT': '%d.%m.%Y %H:%I:%S',
    'TIME_FORMAT': '%H:%I:%S',
    'DATE_INPUT_FORMATS': ['%d.%m.%Y', ],
    'DATETIME_INPUT_FORMATS': ['%d.%m.%Y %H:%I:%S', ],
    'TIME_INPUT_FORMATS': ['%H:%I:%S', ],
}

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': ENV_DICT.get('POSTGRES_DB', None),
        'USER': ENV_DICT.get('POSTGRES_USER', None),
        'PASSWORD': ENV_DICT.get('POSTGRES_PASSWORD', None),
        'HOST': ENV_DICT.get('POSTGRES_HOST', None),
        'PORT': ENV_DICT.get('POSTGRES_PORT', None)
    }
}


REDIS_URL = 'redis://{}:{}'.format(
    ENV_DICT.get('REDIS_HOST', '0.0.0.0'),
    ENV_DICT.get('REDIS_PORT', '6379'),
)
REDIS_FULL_URL_0 = '{}/{}'.format(
    REDIS_URL,
    ENV_DICT.get('REDIS_DB', 0)
)  # Django cache.
REDIS_FULL_URL_1 = '{}/{}'.format(
    REDIS_URL,
    ENV_DICT.get('REDIS_DB_1', 1)
)  # Celery.

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = False

USE_TZ = True


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = ENV_DICT.get('DJANGO_EMAIL_HOST', '')
EMAIL_PORT = ENV_DICT.get('DJANGO_EMAIL_PORT', '')
EMAIL_HOST_USER = ENV_DICT.get('DJANGO_EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = ENV_DICT.get('DJANGO_EMAIL_HOST_PASSWORD', '')
EMAIL_USE_TLS = False
DEFAULT_FROM_EMAIL = 'BOOT DOMAIN <info@DOMAIN.ru>'


CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_FULL_URL_0,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PASSWORD': ENV_DICT.get('REDIS_PASSWORD'),
            'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',
            'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
        },
        'KEY_PREFIX': 'PREFIX'
    }
}

# SET Path to log file.
log_file_name = ENV_DICT.get('DJANGO_LOG_FILE_NAME', 'django.log')
path_to_log_file = os.path.join(ENV_DICT.get('DJANGO_LOG_FOLDER', '/opt/logs'), log_file_name)


LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(process)d %(module)s %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename':  path_to_log_file,
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'propagate': True,
            'level': 'WARNING',
        },
        'django.request': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'WARNING',
        },
        'apps': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
        },
    },
}
